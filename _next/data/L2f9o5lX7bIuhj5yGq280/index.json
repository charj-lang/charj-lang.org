{"pageProps":{"intro":"\n![Datum Build](https://github.com/datum-lang/datum-poc/workflows/Datum%20Build/badge.svg)\n\n> A easy maintain(read/write) language for transform **from**/**to** other languages.\n\nDesign for:\n\n - legacy system migration.\n - multiple-targets compiled languages. (by LLVM)\n - quick pseudocode.\n - simple DSL design. (TBD)\n     - domain model design for languages.\n     - visualize architecture.\n\n流程图：\n\n![流程图](https://github.com/datum-lang/arts/blob/master/datum-process.svg?raw=true)\n\n相关项目：\n\n1. IDEA 插件: [Intellij Datum](https://github.com/datum-lang/intellij-datum)\n2. Datum 项目：[Datum](https://github.com/datum-lang/datum)\n3. Scie 语言识别引擎：[Scie](https://github.com/datum-lang/scie)\n4. Movable DSL: [movable](https://github.com/datum-lang/movable)\n5. Typography parser: [Typography](https://github.com/datum-lang/movable/tree/master/typography)\n\n## 流程（设计）\n\n### 1. 解析（Stage 1.0）\n\nVisual Studio Code 使用 Textmate 的语法来解析不同的语言。如下的语言\n\n```c\n#include <stdio.h>\nint main() {\n  printf(\\\"Hello, World!\\\");\n  return 0;\n}\n```\n\n将会被解析为：\n\n```bash\n- token from 0 to 1 () with scopes C\n- token from 0 to 1 (#) with scopes C, meta.preprocessor.include.c, , punctuation.definition.directive.c\n- token from 1 to 8 (include) with scopes C, meta.preprocessor.include.c,\n- token from 8 to 9 ( ) with scopes C, meta.preprocessor.include.c\n- token from 9 to 10 (<) with scopes C, meta.preprocessor.include.c, string.quoted.other.lt-gt.include.c, punctuation.definition.string.begin.c\n- token from 10 to 17 (stdio.h) with scopes C, meta.preprocessor.include.c, string.quoted.other.lt-gt.include.c\n- token from 17 to 18 (>) with scopes C, meta.preprocessor.include.c, string.quoted.other.lt-gt.include.c, punctuation.definition.string.end.c\n- token from 0 to 3 (int) with scopes C, storage.type.built-in.primitive.c\n- token from 3 to 4 ( ) with scopes C\n- token from 4 to 8 (main) with scopes C, meta.function.c, meta.function.definition.parameters.c, entity.name.function.c\n- token from 8 to 9 (() with scopes C, meta.function.c, meta.function.definition.parameters.c, punctuation.section.parameters.begin.bracket.round.c\n- token from 9 to 10 ()) with scopes C, meta.function.c, meta.function.definition.parameters.c, punctuation.section.parameters.end.bracket.round.c\n- token from 10 to 11 ( ) with scopes C\n- token from 11 to 12 ({) with scopes C, meta.block.c, punctuation.section.block.begin.bracket.curly.c\n- token from 0 to 6 (printf) with scopes C, meta.block.c, meta.function-call.c, entity.name.function.c\n- token from 6 to 7 (() with scopes C, meta.block.c, meta.function-call.c, punctuation.section.arguments.begin.bracket.round.c\n- token from 7 to 8 (\") with scopes C, meta.block.c, meta.function-call.c, string.quoted.double.c, punctuation.definition.string.begin.c\n- token from 8 to 21 (Hello, World!) with scopes C, meta.block.c, meta.function-call.c, string.quoted.double.c\n- token from 21 to 22 (\") with scopes C, meta.block.c, meta.function-call.c, string.quoted.double.c, punctuation.definition.string.end.c\n- token from 22 to 23 ()) with scopes C, meta.block.c, meta.function-call.c, punctuation.section.arguments.end.bracket.round.c\n- token from 23 to 24 (;) with scopes C, meta.block.c, punctuation.terminator.statement.c\n- token from 0 to 6 (return) with scopes C, meta.block.c, keyword.control.c\n- token from 6 to 7 ( ) with scopes C, meta.block.c\n- token from 7 to 8 (0) with scopes C, meta.block.c, constant.numeric.decimal.c\n- token from 8 to 9 (;) with scopes C, meta.block.c, punctuation.terminator.statement.c\n```\n\n从这一步，我们可以拿到一个 Tokenizer 后的结果，如我们 include 的情况等等。\n\n#### Stage 2.0 使用 Typography\n\n### 2. DSL 转换\n\n随后，我们要将上述的 Token 进行转换，转换到特定的 Movable DSL。\n\nMovable DSL 将映射到 Poet DSL 上。\n\n### 3. 生成 Datum 代码\n\n即，代码中的：https://github.com/datum-lang/datum-poet\n\n### 4. Datum 编辑与代码优化\n\n[https://github.com/datum-lang/datum](https://github.com/datum-lang/datum)\n\n### 5. 再次转换\n\n理想情况下，通过我们的 Translator DSL，就可以再度将代码转换为新的语言。\n\n"},"__N_SSG":true}